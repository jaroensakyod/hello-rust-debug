#[cfg(test)]
mod tests {
    use anchor_client::solana_sdk::commitment_config::CommitmentConfig;
    use anchor_client::solana_sdk::pubkey::Pubkey;
    use anchor_client::solana_sdk::signature::read_keypair_file;
    use anchor_client::solana_sdk::signature::{Keypair, Signer};
    use anchor_client::{Client, Cluster};
    use anyhow::Result;
    use solana_sdk::system_program;
    // The `accounts` and `instructions` modules are generated by the framework.

    use basic_2::instruction as basic_2_instruction;
    use basic_2::*;
    use basic_2::{accounts as basic_2_accounts, Counter};

    // The `accounts` and `instructions` modules are generated by the framework.
    use clap::Parser;
    use rand::rngs::OsRng;

    #[derive(Parser, Debug)]
    pub struct Opts {
        #[clap(long)]
        basic_2_pid: Pubkey,
    }

    #[test]
    fn test_basic2() {
        println!("Starting test...");
        // let opts = Opts::parse();

        // Wallet and cluster params.
        let payer = read_keypair_file(&*shellexpand::tilde("~/.config/solana/id.json"))
            .expect("Example requires a keypair file");
        let url = Cluster::Custom(
            "http://localhost:8899".to_string(),
            "ws://127.0.0.1:8900".to_string(),
        );

        // Client.
        let client = Client::new_with_options(url, payer, CommitmentConfig::processed());

        // Run tests.
        basic_2(&client, id()).unwrap();

        assert_eq!(2, 2);
    }

    fn basic_2(client: &Client, pid: Pubkey) -> Result<()> {
        let program = client.program(pid);

        // `Create` parameters.
        let counter = Keypair::generate(&mut OsRng);
        let authority = program.payer();

        // Build and send a transaction.
        program
            .request()
            .signer(&counter)
            .accounts(basic_2_accounts::Create {
                counter: counter.pubkey(),
                user: authority,
                system_program: system_program::ID,
            })
            .args(basic_2_instruction::Create { authority })
            .send()?;

        let counter_account: Counter = program.account(counter.pubkey())?;

        assert_eq!(counter_account.authority, authority);
        assert_eq!(counter_account.count, 0);

        println!("Basic 2 success!");

        Ok(())
    }
}
